import com.rameses.common.*
import com.rameses.annotations.*
import com.rameses.services.extended.*

class CheckIssuanceService
{
	@DataContext(value='checkbook', adapter='checkissuance')
	def em_checkbook

	@DataContext(value='checkissuance', adapter='checkissuance')
	def em_checkissuance


	@ProxyMethod
	public def create(entity){
		validate(entity)

		//create check issuance
		entity.state = 'POSTED'
		entity.payee.address = entity.payee.address.text
		em_checkissuance.create(entity)

		//increment current seriess and close check if consumed
		entity.checkbook.currentseries += 1
		def checkbookinfo =[:]
		checkbookinfo.currentseries = entity.checkbook.currentseries
		if (entity.checkbook.currentseries > entity.checkbook.endseries){
			checkbookinfo.state = 'CLOSED'
		}
		em_checkbook.find([objid:entity.checkbook.objid]).update(checkbookinfo)

		return entity
	}
		void validate(entity){
			//validate checkno if the same with current series
			def cb = em_checkbook.find([objid:entity.checkbook.objid]).first()
			if (entity.checkbook.currentseries != cb.currentseries)
				throw new Exception('Check No. is invalid. Close and redo the issuance.')
		}

		@ProxyMethod
		public def open(entity){
			return em_checkissuance.read(entity)
		}

		
}