import com.rameses.common.*
import com.rameses.annotations.*
import com.rameses.services.extended.*

class CheckIssuanceService
{
	@DataContext(value='checkbook', adapter='checkissuance')
	def em_checkbook

	@DataContext(value='checkissuance', adapter='checkissuance')
	def em_checkissuance

	@Service('NumberService')
	def numSvc

	@ProxyMethod
	public def buildCheckReportData(entity){
		//load complete entity data
		entity = em_checkissuance.read(entity)

		//load report as per requirements
		entity.amtinwords = numSvc.convertDouble(entity.amount).toUpperCase()
		entity.amtinwords += ' PESOS ONLY'
		return entity
	}

	@ProxyMethod
	public def open(entity){
		return em_checkissuance.read(entity)
	}
	//add oct 10 2017
	@ProxyMethod
	public def release(entity) {
		entity.state = 'RELEASE'
		return em_checkissuance.update(entity);
	}
	public def cancel(entity) {
		entity.state = 'CANCELLED';
		return em_checkissuance.update(entity);
	}

	//working
	@ProxyMethod
	public def create(entity){
		validate(entity)

	
		
		//create check issuance
		
		entity.state='POSTED'
		entity.payee.address = entity.payee.address.text
		em_checkissuance.create(entity)



		//increment current series and close check if consumed

		entity.checkbook.currentseries +=1
		def checkbookinfo=[:]
		checkbookinfo.currentseries = entity.checkbook.currentseries
		if (entity.checkbook.currentseries > entity.checkbook.endseries){
			checkbookinfo.state='CLOSED'
		}
		em_checkbook.find([objid:entity.checkbook.objid]).update(checkbookinfo)
		return entity
	}

	void validate(entity){
		// validate checkno if same with current series
		def cb = em_checkbook.find([objid:entity.checkbook.objid]).first()
		if(entity.checkbook.currentseries !=cb.currentseries)
			throw new Exception('Check No. is invalid. Close and redo the issuance.')

		if(entity.amount <=0)
			throw new Exception('Please check the amount not equal to 0.00!')

	}

}