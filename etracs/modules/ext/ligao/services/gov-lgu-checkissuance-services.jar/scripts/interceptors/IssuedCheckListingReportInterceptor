import com.rameses.common.*
import com.rameses.annotations.*
import com.rameses.services.extended.*

class IssuedCheckListingReportInterceptor
{
	@ActiveDB(value="checkissuance_report", adapter="checkissuance")
	def em

	@After(pattern="FormReportService.getParameters", 
		   eval="#{args[0].reportid=='check_issued_listing'}")
	public void getParameters(ei){
		def data= ei.result

		//parameters is required
		//it should contain the list of controls for filter
		data.parameters=[]
		data.parameters << [name:'year', caption:'Year', type:'integer', required:true ]
		data.parameters << [name:'fund', caption:'Fund', type:'lookup', ref:'fund',expression:'#{item.title}']
	}

	@After(pattern="FormReportService.getData",
		eval="#{args[0].reportid=='check_issued_listing'}")
	public void getData(evt){
		def res = evt.result
		def args = evt.args[0]

		def param = [:]
		param.startdate = args.parameters.year + '-01-01' //2017-01-01
		param.enddate = (args.parameters.year+1) + '-01-01' //2018-01-01
		param.fundid = '%'
		if (args.parameters.fund){
			param.fundid = args.parameters.fund.objid
		}

		//get data through sql statement file
		res.data = em.getIssuedCheckListing(param)

		//send completed status
		// 0 - completed
		//1 - uncompleted (client is asynchronous and stop until 0 completed)
		res.status = 0
	}
}